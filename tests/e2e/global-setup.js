// Global Setup for Playwright E2E Tests
// Configuration globale avant l'ex√©cution de tous les tests E2E

const { chromium } = require('@playwright/test');

module.exports = async (config) => {
  console.log('üöÄ Initialisation des tests E2E - Les Scoops du Jour');

  // Cr√©er un navigateur pour les t√¢ches de pr√©paration
  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    // V√©rifier que le serveur de d√©veloppement fonctionne
    console.log('üì° V√©rification du serveur de d√©veloppement...');
    await page.goto('http://localhost:8080', { timeout: 30000 });
    await page.waitForLoadState('networkidle');

    const title = await page.title();
    console.log(`‚úÖ Serveur op√©rationnel - Titre: ${title}`);

    // Pr√©parer les donn√©es de test
    console.log('üìä Pr√©paration des donn√©es de test...');

    // Injecter des donn√©es de test dans localStorage
    await page.evaluate(() => {
      // Donn√©es utilisateur de test
      const testUser = {
        id: 'test-user-123',
        email: 'test@lescoopsdujour.com',
        name: 'Test User',
        preferences: {
          frequency: 'daily',
          categories: ['politique', 'economie', 'sport'],
          format: 'html'
        },
        subscribedAt: new Date().toISOString(),
        confirmed: true
      };

      localStorage.setItem('user', JSON.stringify(testUser));
      localStorage.setItem('userPreferences', JSON.stringify(testUser.preferences));

      // Articles lus r√©cemment
      const recentArticles = [
        { id: 1, title: 'Article politique r√©cent', readAt: new Date().toISOString() },
        { id: 2, title: 'Article √©conomique r√©cent', readAt: new Date(Date.now() - 3600000).toISOString() }
      ];

      localStorage.setItem('recentArticles', JSON.stringify(recentArticles));

      // Favoris
      const favorites = [1, 3, 5];
      localStorage.setItem('favorites', JSON.stringify(favorites));

      // Statistiques de partage (pour les tests)
      const shareStats = {
        facebook: 15,
        twitter: 8,
        whatsapp: 12,
        linkedin: 3,
        telegram: 2,
        email: 5,
        copy: 7,
        total: 52
      };

      localStorage.setItem('shareStats', JSON.stringify(shareStats));

      console.log('‚úÖ Donn√©es de test pr√©par√©es');
    });

    // V√©rifier que les APIs sociales sont mock√©es pour les tests
    console.log('üîó Configuration des mocks pour les APIs sociales...');

    await page.addScriptTag({
      content: `
// Mock des APIs sociales pour les tests E2E
window.mockSocialAPIs = () => {
  // Mock Twitter
  window.twttr = {
    widgets: {
      load: () => Promise.resolve(),
      createTweet: (id, options) => {
        const div = document.createElement('div');
        div.innerHTML = '<p>Mock Twitter Tweet</p>';
        return Promise.resolve(div);
      },
      createTimeline: (id, options) => {
        const div = document.createElement('div');
        div.innerHTML = '<p>Mock Twitter Timeline</p>';
        return Promise.resolve(div);
      }
    }
  };

  // Mock Facebook
  window.FB = {
    init: () => {},
    XFBML: {
      parse: () => {}
    }
  };

  // Mock Web Share API
  if (!navigator.share) {
    navigator.share = (data) => {
      console.log('Mock Web Share:', data);
      return Promise.resolve();
    };
  }

  // Mock Clipboard API
  if (!navigator.clipboard) {
    navigator.clipboard = {
      writeText: (text) => {
        console.log('Mock Clipboard write:', text);
        return Promise.resolve();
      },
      readText: () => Promise.resolve('mock-clipboard-text')
    };
  }

  console.log('‚úÖ APIs sociales mock√©es pour les tests');
};

// Initialiser les mocks
window.mockSocialAPIs();
      `
    });

    console.log('‚úÖ Mocks des APIs sociales configur√©s');

    // Capturer une capture d'√©cran de r√©f√©rence
    await page.screenshot({ path: 'test-results/setup-screenshot.png', fullPage: true });
    console.log('üì∏ Capture d\'√©cran de r√©f√©rence sauvegard√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration globale:', error);
    throw error;
  } finally {
    await browser.close();
  }

  console.log('üéØ Configuration globale termin√©e');
};
